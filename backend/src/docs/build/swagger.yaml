openapi: 3.0.0
info:
  title: Developer Social Network API
  version: 1.0.0
  description: Documentación de la API usando Swagger
servers:
  - url: 'https://mrmolanodev.site/api/v1'
    description: Production server
  - url: 'http://localhost:3000/api/v1'
    description: Sandbox server (uses test data)
tags:
  - name: Posts
    description: API para gestionar posts
  - name: Project
    description: API para gestionar projects
  - name: Authentication
    description: API para autenticar usuarios
  - name: Users
    description: API para gestionar usuarios
  - name: Technologies
    description: API para gestionar tecnologias
  - name: Comment
    description: API para gestionar comentarios
  - name: Social Networks
    description: API para gestionar las redes sociales de un usuario
  - name: Notification
    description: API para gestionar notificaciones
  - name: Role
    description: API para gestionar los roles
paths:
  /post/me:
    get:
      summary: Obtiene todos los posts
      tags:
        - Posts
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            description: Número máximo de posts a devolver
          required: false
          description: Limita el número de posts devueltos (por defecto devuelve todos)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            description: Número de posts a saltar antes de comenzar a devolver los resultados
          required: false
          description: Saltar los primeros 'n' posts (para paginación)
        - in: query
          name: search
          schema:
            type: string
            description: Buscar posts por el título
          required: false
          description: Buscar posts cuyo título contenga el término de búsqueda proporcionado
      responses:
        '200':
          description: Lista de posts
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                results:
                  - id: 1
                    title: Primer post
                    content: Contenido del primer post
                    user:
                      id: 1
                      name: username
                      email: email@gmail.com
                      authId: 1
                      authName: user
                      token: asdjgsad
                      role: Business Analyst
                      avatar: 'https://image-url'
                      location: Buenos Aires
                      job: Mercado libre
                      created_at: '2024-10-24T00:28:22.893Z'
                      isfollower: true
                    technologies:
                      - name: react
                        color: '#ffffff'
                      - name: express
                        color: '#000000'
                    images:
                      - id: 1
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                      - id: 2
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                    likesCount: 5
                    commentsCount: 10
                    islike: true
                  - id: 2
                    title: Segundo post
                    content: Contenido del segundo post
                    user:
                      id: 1
                      name: username
                      email: email@gmail.com
                      authId: 1
                      authName: user
                      token: asdjgsad
                      role: Business Analyst
                      avatar: 'https://image-url'
                      location: Buenos Aires
                      job: Mercado libre
                      created_at: '2024-10-24T00:28:22.893Z'
                      isfollowe: false
                    technologies:
                      - name: react
                        color: '#ffffff'
                      - name: express
                        color: '#000000'
                    images:
                      - id: 1
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                      - id: 2
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                    likesCount: 5
                    commentsCount: 10
                    islike: false
    post:
      summary: Crea un nuevo post
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                technologies:
                  type: array
                  items:
                    type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
            example:
              title: Mi primer post
              content: Este es el contenido de mi primer post
              technologies:
                - react
                - nextjs
              images:
                - image-1.png
                - image-2.png
      responses:
        '201':
          description: Post creado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: '1'
                title: Mi primer post
                content: Este es el contenido de mi primer post
                user: 12345
        '401':
          description: Acceso denegado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Permisos insuficientes para crear un nuevo post
  '/post/{id}':
    get:
      summary: Obtiene un post por ID
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          description: ID del post
          schema:
            type: string
      responses:
        '200':
          description: Post encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: '1'
                title: Mi primer post
                content: Este es el contenido de mi primer post
                technologies:
                  - name: nextjs
                    color: '#bbbbbb'
                images:
                  - id: 1
                    url: 'https://image-url'
                    alt: tecno image
                    created_at: '2024-10-08T22:28:58.981Z'
                  - id: 2
                    url: 'https://image-url'
                    alt: tecno image
                    created_at: '2024-10-08T22:28:58.981Z'
                user:
                  id: 1
                  name: username
                  email: email@gmail.com
        '404':
          description: Post no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: post no encontrado
    delete:
      summary: Elimina un post por ID
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          description: ID del post
          schema:
            type: string
      responses:
        '204':
          description: Post eliminado
        '404':
          description: Post no encontrado
    put:
      summary: Modifica un post ya existente
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                title:
                  type: string
                content:
                  type: string
                user:
                  type: number
                technologies:
                  type: array
                  items:
                    $ref: '#/paths/~1technology/post/responses/201/content/application~1json/schema'
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: number
                      url:
                        type: string
                      alt:
                        type: string
                      created_at:
                        type: string
            example:
              title: Mi primer post
              content: Este es el contenido de mi primer post
              user: '12345'
      responses:
        '201':
          description: Post modificado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: '1'
                title: Mi primer post
                content: Este es el contenido de mi primer post
                user: '12345'
  '/post/{id}/followed':
    get:
      summary: Obtiene todos post de los usuarios seguidos
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: Lista de posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                - id: '1'
                  title: Primer post
                  content: Contenido del primer post
                - id: '2'
                  title: Segundo post
                  content: Contenido del segundo post
        '204':
          description: no se encontraron posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example: []
  '/post/user/{userid}':
    get:
      summary: Obtiene todos los posts asociados a un usuario
      tags:
        - Posts
      parameters:
        - in: path
          name: userid
          required: true
          description: ID del usuario
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            description: Número máximo de posts a devolver
          required: false
          description: Limita el número de posts devueltos (por defecto devuelve todos)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            description: Número de posts a saltar antes de comenzar a devolver los resultados
          required: false
          description: Saltar los primeros 'n' posts (para paginación)
      responses:
        '200':
          description: usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                results:
                  - id: 1
                    title: Primer post
                    content: Contenido del primer post
                    user:
                      id: 1
                      name: username
                      email: email@gmail.com
                      authId: 1
                      authName: user
                      token: asdjgsad
                      role: Business Analyst
                      avatar: 'https://image-url'
                      location: Buenos Aires
                      job: Mercado libre
                      created_at: '2024-10-24T00:28:22.893Z'
                    technologies:
                      - name: react
                        color: '#ffffff'
                      - name: express
                        color: '#000000'
                    images:
                      - id: 1
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                      - id: 2
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                    likesCount: 5
                    commentsCount: 10
                  - id: 2
                    title: Segundo post
                    content: Contenido del segundo post
                    user:
                      id: 1
                      name: username
                      email: email@gmail.com
                      authId: 1
                      authName: user
                      token: asdjgsad
                      role: Business Analyst
                      avatar: 'https://image-url'
                      location: Buenos Aires
                      job: Mercado libre
                      created_at: '2024-10-24T00:28:22.893Z'
                    technologies:
                      - name: react
                        color: '#ffffff'
                      - name: express
                        color: '#000000'
                    images:
                      - id: 1
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                      - id: 2
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                    likesCount: 5
                    commentsCount: 10
                totalPages: 1
                currentPage: 1
                totalPosts: 2
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  '/post/{id}/like':
    post:
      summary: Agregar like a un post
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          description: ID del post
          schema:
            type: integer
      responses:
        '201':
          description: like creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                message: like creado correctamente
        '401':
          description: usuario no autorizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no autorizado
        '404':
          description: post no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: post no encontrado
    delete:
      summary: Eliminar like a un post
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          description: ID del post
          schema:
            type: integer
      responses:
        '204':
          description: like eliminado correctamente
          content:
            application/json:
              example:
                message: like removed succesfully
        '401':
          description: usuario no autorizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no autorizado
        '404':
          description: like no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: user hasn`t liked this post
  /post:
    get:
      summary: Obtiene todos los posts
      tags:
        - Posts
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            description: Número máximo de posts a devolver
          required: false
          description: Limita el número de posts devueltos (por defecto devuelve todos)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            description: Número de posts a saltar antes de comenzar a devolver los resultados
          required: false
          description: Saltar los primeros 'n' posts (para paginación)
        - in: query
          name: search
          schema:
            type: string
            description: Buscar posts por el título
          required: false
          description: Buscar posts cuyo título contenga el término de búsqueda proporcionado
      responses:
        '200':
          description: Lista de posts
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                results:
                  - id: 1
                    title: Primer post
                    content: Contenido del primer post
                    user:
                      id: 1
                      name: username
                      email: email@gmail.com
                      authId: 1
                      authName: user
                      token: asdjgsad
                      role: Business Analyst
                      avatar: 'https://image-url'
                      location: Buenos Aires
                      job: Mercado libre
                      created_at: '2024-10-24T00:28:22.893Z'
                    technologies:
                      - name: react
                        color: '#ffffff'
                      - name: express
                        color: '#000000'
                    images:
                      - id: 1
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                      - id: 2
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                    likesCount: 5
                    commentsCount: 10
                  - id: 2
                    title: Segundo post
                    content: Contenido del segundo post
                    user:
                      id: 1
                      name: username
                      email: email@gmail.com
                      authId: 1
                      authName: user
                      token: asdjgsad
                      role: Business Analyst
                      avatar: 'https://image-url'
                      location: Buenos Aires
                      job: Mercado libre
                      created_at: '2024-10-24T00:28:22.893Z'
                    technologies:
                      - name: react
                        color: '#ffffff'
                      - name: express
                        color: '#000000'
                    images:
                      - id: 1
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                      - id: 2
                        url: 'https://image-url'
                        alt: tecno image
                        created_at: '2024-10-08T22:28:58.981Z'
                    likesCount: 5
                    commentsCount: 10
  /project:
    post:
      summary: Crea un nuevo proyecto
      tags:
        - Project
      parameters:
        - name: user_id
          in: cookie
          required: true
          schema:
            type: number
          description: The user ID is sent via cookie for authentication or identification purposes.
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: E-commerce
              description: Descubri una nueva forma de hacer compras online
              role: frontend
              url: 'https://github-pages.com'
              technologies:
                - astro
                - react
                - nextjs
              collaborators:
                - Martin
                - Sofia
                - Marcos
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                role:
                  type: string
                url:
                  type: string
                collaborators:
                  type: string
      responses:
        '201':
          description: Proyecto creado
    get:
      summary: Obtiene todos los proyectos
      tags:
        - Project
      responses:
        '200':
          description: Lista de proyectos
  '/project/user/{userid}':
    get:
      summary: Obtiene todos los proyectos asociados a un usuario
      tags:
        - Project
      parameters:
        - in: path
          name: userid
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: proyectos encontrados
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                projects:
                  - id: 1
                    name: ecommerce
                    description: Ecommerce destinado a productos hogareños
                    url: 'https://proyecto-1.com'
                    created_at: '2024-10-17T21:37:15.023Z'
                  - id: 2
                    name: refugio de mascotas
                    description: Ecommerce destinado a productos hogareños
                    url: 'https://proyecto-1.com'
                    created_at: '2024-10-17T21:37:15.023Z'
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  '/project/user/{userid}/liked':
    get:
      summary: Obtiene todos los proyectos likeados por el usuario
      tags:
        - Project
      parameters:
        - in: path
          name: userid
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: proyectos encontrados
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                projects:
                  - id: 1
                    name: ecommerce
                    description: Ecommerce destinado a productos hogareños
                    url: 'https://proyecto-1.com'
                    created_at: '2024-10-17T21:37:15.023Z'
                  - id: 2
                    name: refugio de mascotas
                    description: Ecommerce destinado a productos hogareños
                    url: 'https://proyecto-1.com'
                    created_at: '2024-10-17T21:37:15.023Z'
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  '/project/{id}':
    get:
      summary: Obtiene un proyecto por ID
      tags:
        - Project
      parameters:
        - in: path
          name: id
          required: true
          description: ID del proyecto
      responses:
        '200':
          description: Proyecto encontrado
        '404':
          description: Proyecto no encontrado
    put:
      summary: Actualiza un proyecto por ID
      tags:
        - Project
      parameters:
        - in: path
          name: id
          required: true
          description: ID del proyecto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: Proyecto actualizado
        '404':
          description: Proyecto no encontrado
    delete:
      summary: Elimina un proyecto por ID
      tags:
        - Project
      parameters:
        - in: path
          name: id
          required: true
          description: ID del proyecto
      responses:
        '204':
          description: Proyecto eliminado
        '404':
          description: Proyecto no encontrado
  /technology:
    get:
      summary: Obtiene todos las tecnologias
      tags:
        - Technologies
      responses:
        '200':
          description: Lista de las tecnologias
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1technology/post/responses/201/content/application~1json/schema'
              example:
                - name: react
                  color: '#ffffff'
                - name: express
                  color: '#000000'
    post:
      summary: Crea una nueva tecnologia
      tags:
        - Technologies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
            example:
              name: angular
      responses:
        '201':
          description: tecnologia creada
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  color:
                    type: string
              example:
                name: angular
                color: '#ffffff'
  '/technology/{name}':
    get:
      summary: Obtiene una tecnologia por nombre
      tags:
        - Technologies
      parameters:
        - in: path
          name: name
          required: true
          description: Nombre de la tecnologia
          schema:
            type: string
      responses:
        '200':
          description: tecnologia encontrada
          content:
            application/json:
              schema:
                $ref: '#/paths/~1technology/post/responses/201/content/application~1json/schema'
              example:
                name: react
                color: '#ffffff'
        '404':
          description: tecnologia no encontrada
    delete:
      summary: Elimina una tecnologia por nombre
      tags:
        - Technologies
      parameters:
        - in: path
          name: name
          required: true
          description: nombre de la tecnologia
          schema:
            type: string
      responses:
        '204':
          description: tecnologia eliminada
        '404':
          description: tecnologia no encontrada
    put:
      summary: Modifica una tecnologia ya existente
      tags:
        - Technologies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1technology/post/requestBody/content/application~1json/schema'
            example:
              name: react
              color: '#ffffff'
      responses:
        '201':
          description: tecnologia modificada
          content:
            application/json:
              schema:
                $ref: '#/paths/~1technology/post/responses/201/content/application~1json/schema'
              example:
                name: react
                color: '#ffffff'
  /user:
    get:
      summary: Obtiene todos los usuarios
      tags:
        - Users
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            description: Número máximo de usuarios a devolver
          required: false
          description: Limita el número de usuarios devueltos
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            description: Número de usuarios a saltar antes de comenzar a devolver los resultados
          required: false
          description: Saltar los primeros 'n' usuarios
        - in: query
          name: search
          schema:
            type: string
            description: Buscar usuarios por el nombre
          required: false
          description: Buscar usuarios cuyo nombre contenga el término de búsqueda proporcionado
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                totalPages: 10
                currentPage: 1
                totalUsers: 70
                users:
                  - id: 1
                    name: Martin
                    email: email@gmail.com
                    location: Buenos Aires
                    avatar: 'https://avatar-url'
                    job: Mercado libre
                    roles:
                      - Software Developer
                      - Cloud Architect
                    social_networks:
                      id: 1
                      gitlab: 'https://example.com'
                      twitter: 'https://example.com'
                      instagram: 'https://example.com'
                      linkedin: null
                      facebook: null
                      github: null
                    postCount: 1
                    followersCount: 10
                    followedCount: 2
                  - id: 2
                    name: Sofia
                    email: email@gmail.com
                    location: Buenos Aires
                    avatar: 'https://avatar-url'
                    job: Mercado libre
                    roles:
                      - Software Developer
                      - Cloud Architect
                    social_networks:
                      id: 1
                      gitlab: 'https://example.com'
                      twitter: 'https://example.com'
                      instagram: 'https://example.com'
                      linkedin: null
                      facebook: null
                      github: null
                    postCount: 1
                    followersCount: 10
                    followedCount: 2
  '/user/role/{role}':
    get:
      summary: Obtiene todos los usuario asociados a un rol
      tags:
        - Users
      parameters:
        - in: path
          name: role
          required: true
          description: nombre del rol
          schema:
            type: string
      responses:
        '200':
          description: usuarios encontrados
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                - id: 1
                  name: Martin
                  email: email@gmail.com
                  location: Buenos Aires
                  avatar: 'https://avatar-url'
                  job: Mercado libre
                  roles:
                    - Software Developer
                    - Cloud Architect
                  social_networks:
                    id: 1
                    gitlab: 'https://example.com'
                    twitter: 'https://example.com'
                    instagram: 'https://example.com'
                    linkedin: null
                    facebook: null
                    github: null
                - id: 2
                  name: Sofia
                  email: email@gmail.com
                  location: Buenos Aires
                  avatar: 'https://avatar-url'
                  job: Mercado libre
                  roles:
                    - Software Developer
                    - Cloud Architect
                  social_networks:
                    id: 1
                    gitlab: 'https://example.com'
                    twitter: 'https://example.com'
                    instagram: 'https://example.com'
                    linkedin: null
                    facebook: null
                    github: null
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  '/user/{id}':
    get:
      summary: Obtiene un usuario por ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: 1
                name: Martin
                email: email@gmail.com
                location: Buenos Aires
                avatar: 'https://avatar-url'
                job: Mercado libre
                roles:
                  - Software Developer
                  - Cloud Architect
                social_networks:
                  id: 1
                  gitlab: 'https://example.com'
                  twitter: 'https://example.com'
                  instagram: 'https://example.com'
                  linkedin: null
                  facebook: null
                  github: null
                posts:
                  - id: 5
                    content: Understanding entity relationships and how to handle them in TypeORM.
                    title: Entity Relationships in TypeORM
                    created_at: '2024-10-24T01:35:08.196Z'
                  - id: 5
                    content: Understanding entity relationships and how to handle them in TypeORM.
                    title: Entity Relationships in TypeORM
                    created_at: '2024-10-24T01:35:08.196Z'
                followerscount: 10
                followedcount: 10
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
    delete:
      summary: Elimina un usuario por ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '204':
          description: usuario eliminado
        '404':
          description: usuario no encontrado
    put:
      summary: Modifica un usuario ya existente
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                name:
                  type: string
                email:
                  type: string
                password:
                  type: number
                social_networks:
                  type: object
                  properties:
                    id:
                      type: number
                    github:
                      type: string
                    gitlab:
                      type: string
                    twitter:
                      type: string
                    instagram:
                      type: string
                    facebook:
                      type: string
                    linkedin:
                      type: string
                posts:
                  type: array
                  items:
                    $ref: '#/paths/~1post~1%7Bid%7D/put/requestBody/content/application~1json/schema'
            example:
              name: Martin
              username: martin2024
              role: diseñador ux/ui
              avatar: 'https://image.png'
              location: Buenos Aires
              job: Freelance
      responses:
        '201':
          description: usuario modificado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: '1'
                title: Mi primer usuario
                content: Este es el contenido de mi primer usuario
                user: '12345'
  '/user/{id}/followed/{followedid}':
    post:
      summary: Seguir a un usuario
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario que va a seguir
          schema:
            type: integer
        - in: path
          name: followedid
          required: true
          description: ID del usuario que va a ser seguido
          schema:
            type: integer
      responses:
        '201':
          description: usuario seguido correctamente
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                message: usuario seguido correctamente
        '401':
          description: usuario no autorizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no autorizado
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  '/user/{id}/followers':
    get:
      summary: Obtiene todos los usuarios que siguen al usuario cliente
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            description: Número máximo de usuarios a devolver
          required: false
          description: Limita el número de usuarios devueltos
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            description: Número de usuarios a saltar antes de comenzar a devolver los resultados
          required: false
          description: Saltar los primeros 'n' usuarios
        - in: query
          name: search
          schema:
            type: string
            description: Buscar usuarios por el nombre
          required: false
          description: Buscar usuarios cuyo nombre contenga el término de búsqueda proporcionado
      responses:
        '200':
          description: usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                followers:
                  - id: 1
                    name: Martin
                    email: email@gmail.com
                  - id: 2
                    name: Sofia
                    email: email@gmail.com
                currentPage: 1
                totalUsers: 10
                totalPages: 2
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  '/user/{id}/followed':
    get:
      summary: Obtiene todos los usuarios a los que sigue el usuario cliente
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            description: Número máximo de usuarios a devolver
          required: false
          description: Limita el número de usuarios devueltos
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            description: Número de usuarios a saltar antes de comenzar a devolver los resultados
          required: false
          description: Saltar los primeros 'n' usuarios
        - in: query
          name: search
          schema:
            type: string
            description: Buscar usuarios por el nombre
          required: false
          description: Buscar usuarios cuyo nombre contenga el término de búsqueda proporcionado
      responses:
        '200':
          description: usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                followers:
                  - id: 1
                    name: Martin
                    email: email@gmail.com
                  - id: 2
                    name: Sofia
                    email: email@gmail.com
                currentPage: 1
                totalUsers: 10
                totalPages: 2
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  /comment:
    post:
      summary: Crea un nuevo comentario
      tags:
        - Comment
      parameters:
        - name: user_id
          in: cookie
          required: true
          schema:
            type: number
          description: The user ID is sent via cookie for authentication or identification purposes.
        - name: post_id
          in: path
          required: true
          description: ID del post
      requestBody:
        required: true
        content:
          application/json:
            example:
              content: Este es un nuevo comentario
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '201':
          description: tecnologia creada
          content:
            application/json:
              example:
                message: comentario creado exitosamente
    get:
      summary: Obtiene todos los comentarios
      tags:
        - Comment
      responses:
        '200':
          description: Lista de comentarios
  '/comment/{id}':
    get:
      summary: Obtiene un comment por ID
      tags:
        - Comment
      parameters:
        - in: path
          name: id
          required: true
          description: ID del comment
      responses:
        '200':
          description: Proyecto encontrado
        '404':
          description: Proyecto no encontrado
    put:
      summary: Actualiza un comment por ID
      tags:
        - Comment
      parameters:
        - in: path
          name: id
          required: true
          description: ID del proyecto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                content:
                  type: string
                user_id:
                  type: number
                post_id:
                  type: number
                created_at:
                  type: date
      responses:
        '200':
          description: comentario actualizado
        '404':
          description: comentario no encontrado
    delete:
      summary: Elimina un comentario por ID
      tags:
        - Comment
      parameters:
        - in: path
          name: id
          required: true
          description: ID del comentario
      responses:
        '204':
          description: comentario eliminado
        '404':
          description: comentario no encontrado
  /auth/register:
    post:
      summary: Registra un nuevo usuario
      tags:
        - Authentication
      responses:
        '201':
          description: Usuario registrado exitosamente
        '400':
          description: Error en la petición
  /auth/login:
    $ref: '#/paths/~1auth~1me'
  /auth/me:
    get:
      summary: Autenticar usuario y generar token
      tags:
        - Authentication
      responses:
        '200':
          description: Login exitoso
        '401':
          description: Error de autenticación
  '/like/user/{userid}':
    get:
      summary: Obtiene todos los Like asociados a un usuario
      tags:
        - Like
      parameters:
        - in: path
          name: userid
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/paths/~1user~1%7Bid%7D/put/requestBody/content/application~1json/schema'
              example:
                id: 1
                post: '1'
                created_at: '2024-10-16'
        '404':
          description: usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: usuario no encontrado
  /social-networks:
    put:
      summary: Modifica las redes sociales de un usuario
      tags:
        - Social Networks
      parameters:
        - in: cookie
          name: authId
          description: Indica el id del usuario que desea modificar sus redes sociales
          schema:
            type: string
            required: true
      requestBody:
        required: true
        content:
          application/json:
            example:
              linkedin: 'https://network.com'
              github: 'https://network.com'
              facebook: 'https://network.com'
              instagram: 'https://network.com'
              gitlab: 'https://network.com'
              twitter: 'https://network.com'
      responses:
        '201':
          description: redes sociales modificadas
          content:
            application/json:
              example:
                message: redes sociales modificadas exitosamente
  /notification:
    get:
      summary: Obtiene todos las notificaciones
      tags:
        - Notification
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            description: Número máximo de notificaciones a devolver
          required: false
          description: Limita el número de notificaciones devueltos
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            description: Número máximo de notificaciones a devolver
          required: false
          description: n paginas para saltar
      responses:
        '200':
          description: Lista de notificaciones
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                    title:
                      type: string
                    description:
                      type: string
                    created_at:
                      type: string
                    soft_delete:
                      type: boolean
              example:
                - id: '1'
                  title: 'primera notificacion '
                  description: 'Contenido del primera  notificacion '
                  user: '12345'
                - id: '2'
                  title: Segunda notificaciones
                  description: Contenido del  la segunda notificaciones
                  created_at: '2024-10-12'
                  user:
                    email: 'lucio@gmail.com '
                    name: lucio
                    avatar: ' img.com'
                    location: ' buenos aires'
                  post:
                    title: titulo
                    id: 1
                    content: contenido
  '/notification/{id}':
    get:
      summary: Obtiene una notificacion por ID
      tags:
        - Notification
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID de la notificación a devolver
      responses:
        '200':
          description: Notificación obtenida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1notification/get/responses/200/content/application~1json/schema/items'
              example:
                - id: '1'
                  title: primera notificación
                  description: Contenido de la primera notificación
                  user: '12345'
                  post:
                    title: titulo
                    id: 1
                    content: contenido
    put:
      summary: Modifica una notificación por ID
      tags:
        - Notification
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID de la notificación a modificar
      responses:
        '201':
          description: Notificación modificada
          content:
            application/json:
              schema:
                $ref: '#/paths/~1notification~1%7Bid%7D'
              example:
                id: '1'
                title: Mi primer Notificación
                content: Este es el contenido de mi primer Notificación
                user: '12345'
  /fileupload:
    post:
      summary: Sube un archivo al servidor y devuelve la URL
      tags:
        - File
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Archivo subido
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
              example:
                url: 'http://localhost:3000/uploads/imagen.jpg'
        '400':
          description: Error al subir el archivo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Error al subir el archivo
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Error del servidor
  /messages:
    post:
      summary: Crear un nuevo mensaje
      tags:
        - Mensajes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Contenido del mensaje.
                receiverId:
                  type: string
                  description: ID del receptor.
              required:
                - content
                - receiverId
      responses:
        '201':
          description: Mensaje creado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  content:
                    type: string
                  sender:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                  receiver:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
        '404':
          description: Receptor no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Receptor no encontrado
    get:
      summary: Obtener mensajes de un usuario específico
      tags:
        - Mensajes
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          required: false
          description: Número máximo de mensajes a devolver
        - in: query
          name: skip
          schema:
            type: integer
            minimum: 0
          required: false
          description: Número de mensajes a omitir
      responses:
        '200':
          description: Lista de mensajes enviados y recibidos por el usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  sentMessages:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        content:
                          type: string
                        receiver:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                  receivedMessages:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        content:
                          type: string
                        sender:
                          type: object
                          properties:
                            id:
                              type: string
  '/messages/between/{receiverId}':
    get:
      summary: Obtener mensajes entre el usuario autenticado y un receptor específico
      tags:
        - Mensajes
      parameters:
        - in: path
          name: receiverId
          required: true
          description: ID del receptor
          schema:
            type: string
        - in: query
          name: limit
          required: false
          description: Número máximo de mensajes a devolver
          schema:
            type: integer
            minimum: 1
        - in: query
          name: skip
          required: false
          description: Número de mensajes a omitir
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Lista de mensajes entre el usuario autenticado y el receptor especificado
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    content:
                      type: string
                    sender:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                    receiver:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
        '404':
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Sender or Receiver not found
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                example:
                  message: Error fetching messages
                  error: Error details here
  '/follow/{id}':
    post:
      summary: Crear una conexión entre el usuario autenticado y el usuario con el ID especificado
      description: Esta operación permite al usuario autenticado seguir a otro usuario mediante su ID. El ID del usuario autenticado se obtiene de una cookie y es procesado por un middleware antes de acceder al controlador.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del usuario a seguir
      responses:
        '200':
          description: Conexión creada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  authId:
                    type: string
                    description: ID del usuario autenticado
                  followingId:
                    type: string
                    description: ID del usuario seguido
        '401':
          description: El usuario no está autenticado
        '500':
          description: Error interno del servidor
  /role:
    get:
      summary: Obtiene todos los roles
      tags:
        - Role
      responses:
        '200':
          description: Lista de los roles
          content:
            application/json:
              schema:
                type: array
              example:
                roles:
                  - Frontend
                  - Backend
                  - Mobile Developer
                  - UX
                  - UI
                  - Tester
                  - DevOps Engineer
                  - AI Engineer
                  - Cybersecurity Analyst
                  - Database Administrator
                  - Project Manager
                  - Scrum Master
                  - Tech Lead
